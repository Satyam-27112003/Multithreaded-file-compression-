#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <pthread.h>
#include <zlib.h>

struct FileCompressionParams {
    std::string inputFilename;
    std::string outputFilename;
    int compressionLevel;
};


void* compressFile(void* params) {
    FileCompressionParams* compressionParams = (FileCompressionParams*)params;

    
    std::ifstream inputFile(compressionParams->inputFilename, std::ios::binary);
    if (!inputFile.is_open()) {
        std::cerr << "Error opening input file: " << compressionParams->inputFilename << std::endl;
        return NULL;
    }

   
    std::ofstream outputFile(compressionParams->outputFilename, std::ios::binary);
    if (!outputFile.is_open()) {
        std::cerr << "Error opening output file: " << compressionParams->outputFilename << std::endl;
        return NULL;
    }

    z_stream strm;
    strm.zalloc = Z_NULL;
    strm.zfree = Z_NULL;
    strm.opaque = Z_NULL;

   
    char inBuffer[4096];
    char outBuffer[4096];
    do {
        inputFile.read(inBuffer, 4096);
        strm.avail_in = inputFile.gcount();
        strm.next_in = (Bytef*)inBuffer;

        do {
            strm.avail_out = 4096;
            strm.next_out = (Bytef*)outBuffer;
            deflate(&strm, Z_FINISH);
            outputFile.write(outBuffer, 4096 - strm.avail_out);
        } while (strm.avail_out == 0);
    } while (inputFile.eof() == false);

  
    deflateEnd(&strm);
    inputFile.close();
    outputFile.close();

    return NULL;
}

int main(int argc, char* argv[]) {
    if (argc < 4) {
        std::cerr << "Usage: " << argv[0] << " input_file output_file compression_level" << std::endl;
        return 1;
    }

    
    pthread_t thread;
    pthread_create(&thread, NULL, compressFile, &compressionParams);

    
    pthread_join(thread, NULL);

    return 0;
}
